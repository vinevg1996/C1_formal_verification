(*param N, NA, NB, NK.*)

type host.
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize.
type serv_signature.
type clnt_signature.

(* Peers *)
const Clnt,Serv:host.

type Z [large,bounded].
type G [large,bounded].
type D [fixed].
type nonce [large, fixed].

(* ms *)
type prf_ms_in.
type concat_for_ms_t.
type PRF_ms_out [fixed].
(* sign *)
type concat_for_serv_sign_t. type concat_for_clnt_sign_t.
(* finished *)
type concat_for_serv_fin_t. type concat_for_clnt_fin_t.
type PRF_serv_fin_out [fixed]. type PRF_clnt_fin_out [fixed].
(* common_key *)
type enc_serv_fin_t.
type enc_clnt_fin_t.
type concat_for_common_key_t.
type PRF_common_key_out [fixed].

(* mess_types *)
type mess1_t.
type mess2_t. type mess3_t. type mess4_t.
type mess7_t. type mess8_t. type mess9_t. type mess11_t.
type mess13_t.
fun Mess1(nonce):mess1_t [data].
fun Mess2(nonce):mess2_t [data].
fun Mess3(pkey):mess3_t [data].
fun Mess4(G, serv_signature):mess4_t [data].
fun Mess7(pkey):mess7_t [data].
fun Mess8(G):mess8_t [data].
fun Mess9(clnt_signature):mess9_t [data].
fun Mess11(enc_clnt_fin_t):mess11_t [data].
(*fun Mess13(PRF_serv_fin_out):mess13_t [data].*)
fun Mess13(enc_serv_fin_t):mess13_t [data].

(* functions *)
fun concat_for_ms(nonce, nonce):concat_for_ms_t [data].
fun concat_for_serv_sign(nonce, nonce, G):concat_for_serv_sign_t [data].
fun concat_for_clnt_sign(mess1_t, mess2_t, mess3_t,
                         mess4_t, mess7_t, mess8_t):concat_for_clnt_sign_t [data].
fun concat_for_clnt_fin(mess1_t, mess2_t, mess3_t,
                        mess4_t, mess7_t, mess8_t,
                        mess9_t):concat_for_clnt_fin_t [data].
fun concat_for_serv_fin(mess1_t, mess2_t, mess3_t,
                        mess4_t, mess7_t, mess8_t,
                        mess9_t, PRF_clnt_fin_out):concat_for_serv_fin_t [data].
fun concat_for_common_key(nonce, nonce):concat_for_common_key_t [data].

expand DH_basic(G, Z, g, exp, exp', mult).

proba Psign. proba Psigncoll.
(* Server signatures *)
expand UF_CMA_proba_signature(keyseed, pkey, skey, concat_for_serv_sign_t, serv_signature,
                              serv_skgen, serv_pkgen, serv_sign, serv_verify, Psign, Psigncoll).
expand UF_CMA_proba_signature(keyseed, pkey, skey, concat_for_clnt_sign_t, clnt_signature,
                              clnt_skgen, clnt_pkgen, clnt_sign, clnt_verify, Psign, Psigncoll).

(* PRF_ODH for ms *)
proba pPRF_ODH_ms.
expand PRF_ODH1(G, Z, concat_for_ms_t, PRF_ms_out, g, exp, exp',
                mult, PRF_ms, pPRF_ODH_ms).

(* Hash of TLS *)
type hash_key [fixed].
type hash_clnt_output_t [fixed].
type hash_serv_output_t [fixed].
proba Phash.
expand CollisionResistant_hash(hash_key, concat_for_clnt_fin_t, hash_clnt_output_t,
                               hash_clnt, hash_clnt_oracle, Phash).
expand CollisionResistant_hash(hash_key, concat_for_serv_fin_t, hash_serv_output_t,
                               hash_serv, hash_serv_oracle, Phash).

(*crypto suf_cma(serv_fin) *;*)
proba Pmac.
expand SUF_CMA_det_mac_all_args(PRF_ms_out, hash_serv_output_t, PRF_serv_fin_out,
                                serv_fin, serv_fin', serv_check_fin, Pmac).
expand SUF_CMA_det_mac_all_args(PRF_ms_out, hash_clnt_output_t, PRF_clnt_fin_out,
                                clnt_fin, clnt_fin', clnt_check_fin, Pmac).


type enc_key [fixed]. type fin_key [fixed].
type four_keys [fixed].
type tuple4keys_t.
expand random_split_4(four_keys, fin_key, fin_key, enc_key, enc_key,
                      tuple4keys_t, tuple4keys, split4).

fun PRF_common_key(PRF_ms_out, concat_for_common_key_t):four_keys.

(*
key: type of keys, must be "bounded" (to be able to generate random numbers from it, and to talk about the runtime of enc_r without mentioning the length of the key), typically "fixed" and "large".
cleartext: type of cleartexts
ciphertext: type of ciphertexts
enc_seed: type of random coins for encryption (must be "bounded"; omitted in the second version of the macro).

enc: encryption function that generates coins internally
enc_r: encryption function that takes coins as argument (omitted in the second version of the macro).
enc_r': symbol that replaces enc_r after game transformation
dec: decryption function
injbot: natural injection from cleartext to bitstringbot
Z: function that returns for each cleartext a cleartext of the same length consisting only of zeroes.
*)
type enc_fin_seed [fixed].
proba Penc.
(* Server_Finished *)
expand IND_CCA2_sym_enc_all_args(fin_key, PRF_serv_fin_out, enc_serv_fin_t, enc_fin_seed,
                                 enc_serv_fin, enc_serv_fin_r, enc_serv_fin_r',
                                 dec_serv_fin, dec_serv_fin',
                                 serv_injbot, Zero_serv, Penc).
(* Client_Finished *)
expand IND_CCA2_sym_enc_all_args(fin_key, PRF_clnt_fin_out, enc_clnt_fin_t, enc_fin_seed,
                                 enc_clnt_fin, enc_clnt_fin_r, enc_clnt_fin_r',
                                 dec_clnt_fin, dec_clnt_fin',
                                 clnt_injbot, Zero_clnt, Penc).
(* APP_data *)
proba P_ind_cca.
type bit_t [fixed]. type enc_bit_seed [fixed].
expand IND_CCA2_sym_enc_all_args(enc_key, bit_t, bit_t, enc_bit_seed,
                                 enc_bit, enc_bit_r, enc_bit_r',
                                 dec_bit, dec_bit',
                                 injbot, Zero_func, P_ind_cca).
(*
equation forall m:bit_t, k:enc_key, r:enc_bit_seed;
	Zero_func(enc_bit_r(m, k, r)) = Zero_func(m).
*)
const Z_bit:bit_t.
equation forall x:bit_t; Zero_func(x) = Z_bit.

channel start, cstart,
        c1, c2, c3, c4, c5, c6, c7, c8,
        s1, s2, s3, s4.

(* Queries and Events *)
event endA(G, G).
event beginB(G, G).
event endB(G, G).

event Client_Accept.
event Server_Accept.
event Client_Reject.
event Server_Reject.

(*
query secret common_key.
query event(Client_Reject) && event(Server_Accept).
*)
